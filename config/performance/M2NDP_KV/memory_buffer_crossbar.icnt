//52*1 fly with 32 flits per packet under gpgpusim injection mode
use_map = 0;
flit_size = 68; 

// currently we do not use this, see subnets below
network_count = 2;

// Topology
topology = fly;
k = 260; // GPU 1, NDP 64, MEM 64
n = 1;

// Routing

routing_function = dest_tag;

// Flow control

num_vcs     = 6;
vc_buf_size = 64;
input_buffer_size = 256;
ejection_buffer_size = 64;
boundary_buffer_size = 64;

wait_for_tail_credit = 0;

// Router architecture

vc_allocator = islip; //separable_input_first;
sw_allocator = islip; //separable_input_first;
alloc_iters  = 1;

credit_delay   = 0;
routing_delay  = 0;
vc_alloc_delay = 1;
sw_alloc_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 2.0;

// Traffic, GPGPU-Sim does not use this

traffic                = uniform;
packet_size ={{1,2,3,4},{10,20}};
packet_size_rate={{1,1,1,1},{2,1}};

// Simulation - Don't change

sim_type       = gpgpusim;
//sim_type = latency;
injection_rate = 0.1;

subnets = 1;

// Always use read and write no matter following line
//use_read_write = 1;


read_request_subnet = 0;
read_reply_subnet = 1;
write_request_subnet = 0;
write_reply_subnet = 1;

read_request_begin_vc = 0;
read_request_end_vc = 0;
write_request_begin_vc = 0;
write_request_end_vc = 0;
from_ndp_request_begin_vc = 2;
from_ndp_request_end_vc = 2;
to_ndp_request_begin_vc = 1;
to_ndp_request_end_vc = 1;
read_reply_begin_vc = 3;
read_reply_end_vc = 3;
write_reply_begin_vc = 3;
write_reply_end_vc = 3;
from_ndp_reply_begin_vc = 5;
from_ndp_reply_end_vc = 5;
to_ndp_reply_begin_vc = 4;
to_ndp_reply_end_vc = 4;

seed = 0;
